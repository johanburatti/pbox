#!/usr/bin/env python3
'''
Find the highest version of all dependencies in the output from Maven enforcer.
'''

import sys
import re


def parse_version(version):
    result = []
    for part in version.split('.'):
        try:
            result.append(int(part))
        except:
            result.append(part)
    return result


def parse_dependency(dependency_str):
    group_id, artifact_id, version = dependency_str.split(':')
    return {
        'group_id': group_id,
        'artifact_id': artifact_id,
        'version': parse_version(version),
    }


def find_highest_version(dependency, input):
    highest_version = dependency['version']
    candidate_version_pattern = re.compile(
        f'{dependency["group_id"]}:{dependency["artifact_id"]}:(\\S+)')
    for candidate_version_str in re.findall(candidate_version_pattern, input):
        candidate_version = parse_version(candidate_version_str)
        highest_version = max(highest_version, candidate_version)
    return highest_version


def format_version(version):
    return '.'.join(map(str, version))


def to_xml(dependency):
    return f'''
<dependency>
  <groupId>{dependency['group_id']}</groupId>
  <artifactId>{dependency['artifact_id']}</artifactId>
  <version>{format_version(dependency['version'])}</version>
</dependency>
    '''.strip()


def main():
    input = sys.stdin.read()
    dependency_pattern = re.compile(
        'Require upper bound dependencies error for '
        '(.*) '
        'paths to dependency are:')
    dependencies = [
        parse_dependency(dependency_str)
        for dependency_str in re.findall(dependency_pattern, input)
    ]
    resolved_dependencies = [
        {
            'group_id': dependency['group_id'],
            'artifact_id': dependency['artifact_id'],
            'version': find_highest_version(dependency, input),
        }
        for dependency in dependencies
    ]
    print("\n\n".join(
        to_xml(dependency)
        for dependency in sorted(
            resolved_dependencies,
            key=lambda d: (d['group_id'], d['artifact_id']))))


if __name__ == '__main__':
    main()
